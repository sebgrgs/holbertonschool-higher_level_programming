The ``7-base_geometry`` module
============================

Using ``BaseGeometry``
-------------------

Import class from module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test instantiation:
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

Test area method:
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Test integer validator with valid integers:
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

Test integer validator with invalid types:
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer
    
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    TypeError: age must be an integer
    
    >>> bg.integer_validator("age", True)
    Traceback (most recent call last):
    TypeError: age must be an integer
    
    >>> bg.integer_validator("age", [3])
    Traceback (most recent call last):
    TypeError: age must be an integer
    
    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    TypeError: age must be an integer

Test integer validator with invalid values:
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0
    
    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

Test integer validator with float:
    >>> bg.integer_validator("age", 7.8)
    Traceback (most recent call last):
    TypeError: age must be an integer
